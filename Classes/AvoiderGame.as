package {	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.ui.Mouse;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.events.Event;	import flash.media.SoundChannel;	import flash.events.MouseEvent;		public class AvoiderGame extends MovieClip 	{		public var gameClock:Clock;		public var gameScore:Score;		public var backgroundContainer:BackgroundContainer;		public var army:Array;		public var enemy:Enemy;		//public var facePlant:Splat;		public var avatar:Avatar;		public var cloud:Clouds;		public var hill:hills;		public var gameTimer:Timer;		public var useMouseControl:Boolean;		public var downKeyIsBeingPressed:Boolean;		public var upKeyIsBeingPressed:Boolean;		public var leftKeyIsBeingPressed:Boolean;		public var rightKeyIsBeingPressed:Boolean;		public var backgroundMusic:BackgroundMusic;		public var bgmSoundChannel:SoundChannel;	//bgm for BackGround Music		public var enemyAppearSound:EnemyAppearSound;		public var sfxSoundChannel:SoundChannel;	//sfx for Sound FX		public var currentLevelData:LevelData;		public var JUMPIN:Boolean;		public var falling:Boolean;		public var jumpCounter:int;		public var bonzai:int;		public var superCounter:int;		public var time:int;										public function AvoiderGame() 		{						currentLevelData = new LevelData( 1 );			setBackgroundImage();						backgroundMusic = new BackgroundMusic();			bgmSoundChannel = backgroundMusic.play();			bgmSoundChannel.addEventListener( Event.SOUND_COMPLETE, onBackgroundMusicFinished, false, 0, true );			enemyAppearSound = new EnemyAppearSound();						downKeyIsBeingPressed = false;			upKeyIsBeingPressed = false;			leftKeyIsBeingPressed = false;			rightKeyIsBeingPressed = false;			JUMPIN = false;			falling = true;									useMouseControl = true;			Mouse.hide();			army = new Array();						avatar = new Avatar();			addChild( avatar );						//facePlant= new Splat();						hill = new hills();			addChild(hill);			hill.x = 480;			hill.y = 640;						cloud = new Clouds();			addChild(cloud);			cloud.x = 900;			cloud.y = 100;						avatar.x = 100;			avatar.y = 320;									gameTimer = new Timer( 25 );			gameTimer.addEventListener( TimerEvent.TIMER, onTick, false, 0, true );			gameTimer.start();						addEventListener( Event.ADDED_TO_STAGE, onAddToStage, false, 0, true );		}				public function onBackgroundMusicFinished( event:Event ):void		{			bgmSoundChannel = backgroundMusic.play();			bgmSoundChannel.addEventListener( Event.SOUND_COMPLETE, onBackgroundMusicFinished, false, 0, true );		}				public function onAddToStage( event:Event ):void		{			stage.addEventListener( KeyboardEvent.KEY_DOWN, onKeyPress, false, 0, true );			stage.addEventListener( KeyboardEvent.KEY_UP, onKeyRelease, false, 0, true );			stage.addEventListener(MouseEvent.CLICK, doTheJump, false, 0, true );		}				public function onKeyPress( keyboardEvent:KeyboardEvent ):void		{			if ( keyboardEvent.keyCode == Keyboard.DOWN )			{				downKeyIsBeingPressed = true;			}			else if ( keyboardEvent.keyCode == Keyboard.UP )			{				upKeyIsBeingPressed = true;			}			else if ( keyboardEvent.keyCode == Keyboard.LEFT )			{				leftKeyIsBeingPressed = true;			}			else if ( keyboardEvent.keyCode == Keyboard.RIGHT )			{				rightKeyIsBeingPressed = true;			}		}		public function doTheJump(event:MouseEvent):void		{						JUMPIN = true;			falling = false;			bonzai = 1;		}				public function onKeyRelease( keyboardEvent:KeyboardEvent ):void		{			if ( keyboardEvent.keyCode == Keyboard.DOWN )			{				downKeyIsBeingPressed = false;			}			else if ( keyboardEvent.keyCode == Keyboard.UP )			{				upKeyIsBeingPressed = false;			}			else if ( keyboardEvent.keyCode == Keyboard.LEFT )			{				leftKeyIsBeingPressed = false;			}			else if ( keyboardEvent.keyCode == Keyboard.RIGHT )			{				rightKeyIsBeingPressed = false;			}		}				public function onTick( timerEvent:TimerEvent ):void 		{			var counter:Number = 1;						gameClock.addToValue( 25 );			cloud.moveClouds();			hill.hillMove();			superCounter++;						/*if(splat)			{				facePlant.x = facePlant.x - 15;			}else			{				facePlant.x=avatar.x;				facePlant.y=avatar.y;			}*/			if(superCounter%20 == 0){				time++;			}																if(falling){				bonzai = 4.65*time;				avatar.y = avatar.y+bonzai;			}												if(JUMPIN)			{								avatar.y = avatar.y-10;				jumpCounter = jumpCounter +1;				trace(jumpCounter);				if(jumpCounter > 10)				{					time =1;					jumpCounter = 0;					JUMPIN = false;					falling = true;				trace('stopped');								}							}										if ( superCounter%40 ==0 )			{				var choice:Number = Math.random();								if (choice<= .2 )				{					var randomX:Number = 100;				}else if (choice > .2 && choice <= .4)				{					var randomX:Number = 228;				}else if (choice > .4 && choice <= .6)				{					var randomX:Number = 356;				}else if (choice > .6 && choice <= .8)				{					var randomX:Number = 484;				}else if (choice > .8 && choice <= 1)				{					var randomX:Number = 602;				}												var newEnemy:Enemy = new Enemy( 970, randomX );				army.push( newEnemy );				addChild( newEnemy );				gameScore.addToValue( 10 );				sfxSoundChannel = enemyAppearSound.play();			}							if ( downKeyIsBeingPressed )				{					avatar.moveABit( 0, 1 );				}				else if ( upKeyIsBeingPressed )				{					avatar.moveABit( 0, -1 );				}				else if ( leftKeyIsBeingPressed )				{					avatar.moveABit( -1, 0 );				}				else if ( rightKeyIsBeingPressed )				{					avatar.moveABit( 1, 0 );				}									if ( avatar.x < ( avatar.width / 2 ) )			{				avatar.x = avatar.width / 2;			}			if ( avatar.x > 400 - ( avatar.width / 2 ) )			{				avatar.x = 400 - ( avatar.width / 2 );			}			if ( avatar.y < ( avatar.height / 2 ) )			{				avatar.y = avatar.height / 2;			}			if ( avatar.y > 640 - ( avatar.height / 2 ) )			{				avatar.y = 640 - ( avatar.height / 2 );			}						var avatarHasBeenHit:Boolean = false;			var i:int = army.length - 1;			var enemy:Enemy;			while ( i > -1 )			{				enemy = army[i];				enemy.moveABit();				if ( PixelPerfectCollisionDetection.isColliding( avatar, enemy, this, true ) ) 				{					//addChild(facePlant);					//removeChild(avatar);					//splat = true;					gameTimer.stop();					avatarHasBeenHit = true;				}				if ( PixelPerfectCollisionDetection.isColliding( avatar, hill, this, true ) ) 				{					gameTimer.stop();					avatarHasBeenHit = true;				}				if ( enemy.x < 0 )				{					removeChild( enemy );					army.splice( i, 1 );				}				i = i - 1;			}			if ( avatarHasBeenHit )			{				trace("avatar has been hit");				bgmSoundChannel.stop();				trace("after stop");				dispatchEvent( new AvatarEvent( AvatarEvent.DEAD ) );			}						if ( gameScore.currentValue >= currentLevelData.pointsToReachNextLevel )			{				currentLevelData = new LevelData( currentLevelData.levelNum + 1 );				setBackgroundImage();			}		}				public function setBackgroundImage():void		{			if ( currentLevelData.backgroundImage == "blue" )			{				backgroundContainer.addChild( new BlueBackground() );			}			else if ( currentLevelData.backgroundImage == "red" )			{				backgroundContainer.addChild( new RedBackground() );			}		}				public function getFinalScore():Number		{			return gameScore.currentValue;		}				public function getFinalClockTime():Number		{			return gameClock.currentValue;		}	}}